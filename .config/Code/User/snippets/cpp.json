{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Boilerplate": {
    "description": "Creates a boilerlate for cpp code",
    "prefix": "boilerplate",
    "body": [
      "#include <bits/stdc++.h>\n",
      "using namespace std;\n",
      "int main() {\n",
      "\t$1\n",
      "\treturn 0;",
      "}"
    ]
  },
  "Assignment Boilerplate": {
    "description": "Creates a boilerlate for assignments, minimal imports",
    "prefix": "assplate",
    "body": [
      "#include <iostream>\n",
      "using std::cout, std::cin, std::endl;\n",
      "int main() {\n",
      "\t$1\n",
      "\treturn 0;\n",
      "}"
    ]
  },
  "CP Boilerplate": {
    "prefix": "cpplate",
    "body": [
      "#include <bits/stdc++.h>  ",
      "#include <complex>",
      "#include <queue>",
      "#include <set>",
      "#include <unordered_set>",
      "#include <list>",
      "#include <chrono>",
      "#include <random>",
      "#include <iostream>",
      "#include <algorithm>",
      "#include <cmath>",
      "#include <string>",
      "#include <vector>",
      "#include <map>",
      "#include <unordered_map>",
      "#include <stack>",
      "#include <iomanip>",
      "#include <fstream>",
      " ",
      "using namespace std;",
      " ",
      "#define int long long int",
      "#define F first",
      "#define S second",
      "#define pb push_back",
      "#define si set<int>",
      "#define vi vector<int>",
      "#define pii pair<int, int>",
      "#define vpi vector<pii>",
      "#define vpp vector<pair<int, pii>>",
      "#define mii map<int, int>",
      "#define mpi map<int, pii>",
      "#define spi set<pii>",
      "#define endl \"\\n\"",
      "#define sz(x) ((int)x.size())",
      "#define all(p) p.begin(), p.end()",
      "#define double long double",
      "#define max_heap priority_queue<int>",
      "#define min_heap priority_queue<int, vi, greater<int>>",
      "#define bug(...) __f(#__VA_ARGS__, __VA_ARGS__)",
      "#define print(a) for (auto x : a) cout << x << \" \"; cout << endl",
      "#define printpair(a) for (auto x : a) cout << x.F << \" \" << x.S << endl",
      "#define printrange(a, x, y) for (int i = x; i < y; i++) cout << a[i] << \" \"; cout << endl",
      "",
      "template <typename Arg1>",
      "void __f(const char* name, Arg1&& arg1) { cout << name << \" : \" << arg1 << endl; }",
      "template <typename Arg1, typename... Args>",
      "void __f(const char* names, Arg1&& arg1, Args&&... args) {",
      "    const char* comma = strchr(names + 1, ',');",
      "    cout.write(names, comma - names) << \" : \" << arg1 << \" | \";",
      "    __f(comma + 1, args...);",
      "}",
      "",
      "void solve() {",
      "$0",
      "}",
      "",
      "int32_t main() {",
      "",
      "    ios_base::sync_with_stdio(false);",
      "    cin.tie(NULL);",
      "    cout.tie(NULL);",
      "",
      "#ifndef ONLINE_JUDGE",
      "    freopen(\"input.txt\", \"r\", stdin);",
      "    freopen(\"output.txt\", \"w\", stdout);",
      "#endif",
      "",
      "    clock_t z = clock();",
      "",
      "    int t = 1;",
      "    // cin >> t;",
      "    while (t--) solve();",
      "",
      "    cerr << \"Run Time : \" << ((double)(clock() - z) / CLOCKS_PER_SEC);",
      "",
      "    return 0;",
      "}"
    ],
    "description": "C++ Snippet"
  }
}
